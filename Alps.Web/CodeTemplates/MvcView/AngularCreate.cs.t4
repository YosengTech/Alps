<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
@model <#= ViewDataTypeName #>
<#
// "form-control" attribute is only supported for all EditorFor() in System.Web.Mvc 5.1.0.0 or later versions, except for checkbox, which uses a div in Bootstrap
string boolType = "System.Boolean";
string dateTimeOffsetType = "System.DateTimeOffset";
Version requiredMvcVersion = new Version("5.1.0.0");
bool isControlHtmlAttributesSupported = MvcVersion >= requiredMvcVersion;
// The following chained if-statement outputs the file header code and markup for a partial view, a view using a layout page, or a regular view.
#>
@{
	Layout = null;
}
<div class="page page-form-validation clearfix">
	<ol class="breadcrumb breadcrumb-small">
		<li>Forms</li>
		<li class="active"><a href="#/<#=ViewDataTypeShortName#>"><#=ViewDataTypeShortName#></a></li>
		<li class="active"><a href="#/<#=ViewDataTypeShortName#>/<#=ViewName#>"><#=ViewName#></a></li>
	</ol>
	<div class="page-wrap">
		<div class="row">
			<div class="panel panel-lined mb30">
				<div class="panel-heading"><i><#=ViewDataTypeShortName#></i></div>
				<div class="panel-body">
					@using (Html.BeginForm())
					{
						@Html.AntiForgeryToken()
						<div class="form-horizontal">
							<h4><#= ViewDataTypeShortName #></h4>
							<hr />
<# 
    if (isControlHtmlAttributesSupported) {
#>
							@Html.ValidationSummary(true, "", new { @class = "text-danger" })
<#        
    } else {
#>
							@Html.ValidationSummary(true)
<#      
    }
#>
<#
foreach (PropertyMetadata property in ModelMetadata.Properties) {
    if (property.Scaffold &&  !property.IsAutoGenerated && !property.IsReadOnly && !property.IsAssociation ) {
        if (property.IsPrimaryKey && IsPropertyGuid(property)) {
			continue;
        } 
#>
							<div class="form-group">
<#
            if (property.IsForeignKey) {
#>
								@Html.LabelFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "text-uppercase small text-bold control-label col-md-1" })
<#
            } else {
#>
								@Html.LabelFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "text-uppercase small text-bold control-label col-md-1" })
<#
            }
#>
								<div class="col-md-11">
<#					
            bool isCheckbox = property.TypeName.Equals(boolType);
            if (property.IsForeignKey) {
			    if (isControlHtmlAttributesSupported) {
#>
									<select name="<#= property.PropertyName #>" id="<#= property.PropertyName #>" class="form-control" ng-model="item.<#= property.PropertyName #>" ng-options="selectList.ID as selectList.Name for selectList in <#= property.PropertyName #>SelectList"></select>
<#
			    } else {
#>
									@Html.DropDownList("<#= property.PropertyName #>", String.Empty)
<#
			    }
            } else  if (isControlHtmlAttributesSupported) {
                if (isCheckbox) {
#>
									<div class="checkbox">
<#
                    PushIndent("    ");
#>
									@Html.EditorFor(model => model.<#= property.PropertyName #>, new { htmlAttributes = new { ng_model="item.<#= property.PropertyName #>"} })
<#
                } else if (property.IsEnum && !property.IsEnumFlags) {
#>
									@Html.EnumDropDownListFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "form-control" , ng_model = "item.<#= property.PropertyName #>" })
<#
                } else {
							if(property.TypeName.Equals(dateTimeOffsetType)){
#>
									<input name="<#= property.PropertyName #>" id="<#= property.PropertyName #>" type="text" class="form-control" ng-model="item.<#= property.PropertyName #>"  bs_datepicker  data_date_format = "yyyy-MM-dd">
<#
							                            }
							else{
#>
									@Html.EditorFor(model => model.<#= property.PropertyName #>, new { htmlAttributes = new { @class = "form-control" , ng_model = "item.<#= property.PropertyName #>"} })
<#
                            }

                }
            } else {
#>
									<input type="text" class="form-control" ng-model="item.<#= property.PropertyName #>">
<#
            }
#>
<# 
            if (isControlHtmlAttributesSupported) {
#>
									@Html.ValidationMessageFor(model => model.<#= property.PropertyName #>, "", new { @class = "text-danger" })
<#        
            } else {
#>
									@Html.ValidationMessageFor(model => model.<#= property.PropertyName #>)
<#      
            }
#>
<#
            if (isCheckbox && isControlHtmlAttributesSupported) {
                PopIndent();
#>
									</div>
<#
            }
#>
								</div>
							</div>
<#
        }
    }

#>
							<div class="form-group  text-center">
								<a class="btn btn-default btn-sm" ng-click="goBack()"><span class="glyphicon glyphicon-chevron-left"></span>&nbsp;返回</a>
								<a class="btn btn-primary btn-sm" ng-click="create<#= ViewDataTypeShortName #>()"><span class="glyphicon glyphicon-save"></span>&nbsp;保存</a>
							</div>
						</div>
					}
				</div>
			</div>
		</div>
	</div>
</div>
<#@ include file="ModelMetadataFunctions.cs.include.t4" #>