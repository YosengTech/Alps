
<#+
// Gets the related entity information for an association property where there is an associated foreign key property.
// Note: ModelMetadata.RelatedEntities contains only the related entities associated through a foreign key property.

RelatedModelMetadata GetRelatedModelMetadata(PropertyMetadata property){
    RelatedModelMetadata propertyModel;
    IDictionary<string, RelatedModelMetadata> relatedProperties;
    if(ModelMetadata.RelatedEntities != null)
    {
        relatedProperties = ModelMetadata.RelatedEntities.ToDictionary(item => item.AssociationPropertyName);
    }
    else
    {
        relatedProperties = new Dictionary<string, RelatedModelMetadata>();
    }
    relatedProperties.TryGetValue(property.PropertyName, out propertyModel);
	
    return propertyModel;
}

// A foreign key, e.g. CategoryID, will have an association name of Category
string GetAssociationName(PropertyMetadata property) {
    RelatedModelMetadata propertyModel = GetRelatedModelMetadata(property);
    return propertyModel != null ? propertyModel.AssociationPropertyName : property.PropertyName;
}

// A foreign key, e.g. CategoryID, will have a value expression of Category.CategoryID
string GetValueExpression(PropertyMetadata property) {
    RelatedModelMetadata propertyModel = GetRelatedModelMetadata(property);
    return propertyModel != null ? propertyModel.AssociationPropertyName + "." + propertyModel.DisplayPropertyName : property.PropertyName;
}

// This will return the primary key property name, if and only if there is exactly
// one primary key. Returns null if there is no PK, or the PK is composite.
string GetPrimaryKeyName() {
    return (ModelMetadata.PrimaryKeys != null && ModelMetadata.PrimaryKeys.Count() == 1) ? ModelMetadata.PrimaryKeys[0].PropertyName : null;
}

bool IsPropertyGuid(PropertyMetadata property) {
    return String.Equals("System.Guid", property.TypeName, StringComparison.OrdinalIgnoreCase);
}
string GetPropertyType(PropertyMetadata property) {
	if(property.IsEnum){
		return "number";
	}
	RelatedModelMetadata propertyModel = GetRelatedModelMetadata(property);
	var orgTypeName="";
    if( propertyModel != null){
		orgTypeName=propertyModel.ShortTypeName;
    }
	else
    {
		orgTypeName=property.ShortTypeName;
    };
	switch (orgTypeName)
    {
		case "Guid":
			orgTypeName= "string";
			break;
		case "int":
		case "decimal":
			orgTypeName="number";
			break;
		case "bool":
			orgTypeName="boolean";
			break;
		case "DateTime":
		case "DateTimeOffset":
			orgTypeName="Date";
			break;

    }
	return orgTypeName;
}
string GetAssociationNameFromForeignKey(PropertyMetadata foreignKey)
{
	return GetValueExpression(foreignKey).TrimEnd(("ID").ToCharArray());
}
    public string CamelCase(string identifier)
    {
        if (String.IsNullOrEmpty(identifier))
        {
            return identifier;
        }

        if (identifier.Length == 1)
        {
            return identifier[0].ToString(CultureInfo.InvariantCulture).ToLowerInvariant();
        }

        return identifier[0].ToString(CultureInfo.InvariantCulture).ToLowerInvariant() + identifier.Substring(1);
    }
/*
string Pluralize(string str)
{
	return pService.Pluralize(str);
}
string  Singularize(string str)
{
	return pService.Singularize(str);
}
	*/
#>